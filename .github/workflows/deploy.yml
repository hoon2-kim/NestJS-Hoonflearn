name: 배포

on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest

    steps:
      - name: 저장소 확인
        uses: actions/checkout@v3

      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: 도커 이미지 빌드, ECR 푸시
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hoonflearn
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    name: deploy
    runs-on: ubuntu-latest
    steps:
      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: EC2에서 ECR 로그인
        env:
          ECR_REGISTRY: ${{ secrets.ECR_URI }}
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin $ECR_REGISTRY

      - name: 도커 stop 및 삭제
        run: |
          CONTAINER_IDS=$(sudo docker ps -a -q)
          for id in $CONTAINER_IDS 
          do
            sudo docker stop "$id" && sudo docker rm "$id"
          done

          docker image prune --force

      - name: env 파일 생성
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_NODE_ENV: ${{ secrets.NODE_ENV }}
          envkey_SERVER_PORT: ${{ secrets.SERVER_PORT }}
          envkey_JWT_AT_SECRET: ${{ secrets.JWT_AT_SECRET }}
          envkey_JWT_AT_EXPIRESIN: ${{ secrets.JWT_AT_EXPIRESIN }}
          envkey_JWT_AT_SECONDS: ${{ secrets.JWT_AT_SECONDS }}
          envkey_JWT_RT_SECRET: ${{ secrets.JWT_RT_SECRET }}
          envkey_JWT_RT_EXPIRESIN: ${{ secrets.JWT_RT_EXPIRESIN }}
          envkey_JWT_RT_SECONDS: ${{ secrets.JWT_RT_SECONDS }}
          envkey_JWT_RT_COOKIE_MAX_AGE: ${{ secrets.JWT_RT_COOKIE_MAX_AGE }}
          envkey_DB_HOST: ${{ secrets.DB_HOST }}
          envkey_DB_PORT: ${{ secrets.DB_PORT }}
          envkey_DB_USERNAME: ${{ secrets.DB_USERNAME }}
          envkey_DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          envkey_DB_DATABASE: ${{ secrets.DB_DATABASE }}
          envkey_IAMPORT_REST_KEY: ${{ secrets.IAMPORT_REST_KEY }}
          envkey_IAMPORT_REST_SECRET_KEY: ${{ secrets.IAMPORT_REST_SECRET_KEY }}
          envkey_AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          envkey_AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          envkey_AWS_REGION: ${{ secrets.AWS_REGION }}
          envkey_AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          envkey_SENTRY_DNS: ${{ secrets.SENTRY_DNS }}
          envkey_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          envkey_REDIS_PORT: ${{ secrets.REDIS_PORT }}
          envkey_REDIS_HOST: ${{ secrets.REDIS_HOST }}
          envkey_COOLSMS_API_KEY: ${{ secrets.COOLSMS_API_KEY }}
          envkey_COOLSMS_API_SECRET: ${{ secrets.COOLSMS_API_SECRET }}
          envkey_COOLSMS_SENDER: ${{ secrets.COOLSMS_SENDER }}

      - name: ssh로 EC2 접속 및 배포
        env:
          ECR_REGISTRY: ${{ secrets.ECR_URI }}
          ECR_REPOSITORY: hoonflearn
          IMAGE_TAG: ${{ github.sha }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG
          script: |
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker run -d --env-file ./.env -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
